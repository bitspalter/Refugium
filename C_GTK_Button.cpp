//////////////////////////////////////////////////////////////////////////////////
// [ GTK_Button_Class_Source ]
//////////////////////////////////////////////////////////////////////////////////

#include "C_GTK_Button.hpp"

//////////////////////////////////////////////////////////////////////////////////
// [Konstructor]  
//////////////////////////////////////////////////////////////////////////////////
C_GTK_Button::C_GTK_Button(){
   this->pbutton = 0;
   this->status  = C_GTK_BUTTON_ERROR;
}
//////////////////////////////////////////////////////////////////////////////////
// [Destructor]
//////////////////////////////////////////////////////////////////////////////////
C_GTK_Button::~C_GTK_Button(){

}
//////////////////////////////////////////////////////////////////////////////////
// [create]
//////////////////////////////////////////////////////////////////////////////////
GtkWidget* C_GTK_Button::create(const gchar *title){

   if(this->status == C_GTK_BUTTON_READY) return(this->pbutton);
   
   if(!title) return(C_GTK_BUTTON_ERROR);
  
   this->pbutton = gtk_button_new_with_label(title);
   if(!this->pbutton) return(C_GTK_BUTTON_ERROR);
   
   this->status = C_GTK_BUTTON_READY;
   
   return(this->pbutton);
}
//////////////////////////////////////////////////////////////////////////////////
// [setCaption]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Button::setCaption(const gchar *title){
  
   if(this->status != C_GTK_BUTTON_READY) return(C_GTK_BUTTON_ERROR);
  
   if(!title) return(C_GTK_BUTTON_ERROR);
   
   gtk_window_set_title(GTK_WINDOW(this->pbutton), title);
   
   return(C_GTK_BUTTON_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setBackground]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Button::setBackground(const GdkRGBA* color){
  
   if(this->status != C_GTK_BUTTON_READY) return(C_GTK_BUTTON_ERROR);
   
   if(!color) return(C_GTK_BUTTON_ERROR);
   
   gtk_widget_override_background_color(this->pbutton, GTK_STATE_FLAG_NORMAL, color);

   return(C_GTK_BUTTON_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setColor]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Button::setColor(const GdkRGBA* color){
  
   if(this->status != C_GTK_BUTTON_READY) return(C_GTK_BUTTON_ERROR);
   
   if(!color) return(C_GTK_BUTTON_ERROR);
   
   gtk_widget_override_color(this->pbutton, GTK_STATE_FLAG_NORMAL, color);

   return(C_GTK_BUTTON_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setSize]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Button::setSize(int x, int y){
  
   if(this->status != C_GTK_BUTTON_READY) return(C_GTK_BUTTON_ERROR);
   
   gtk_widget_set_size_request(this->pbutton, x, y);
   
   return(C_GTK_BUTTON_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [set_size]
//////////////////////////////////////////////////////////////////////////////////
GtkWidget* C_GTK_Button::getButton(){
  
   if(this->status != C_GTK_BUTTON_READY) return(C_GTK_BUTTON_ERROR);
   
   return(this->pbutton);
}
//////////////////////////////////////////////////////////////////////////////////
// [hide]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Button::hide(){
  
   if(this->status != C_GTK_BUTTON_READY) return(C_GTK_BUTTON_ERROR);
   
   gtk_widget_hide(this->pbutton);
   
   return(C_GTK_BUTTON_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [show]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Button::show(){
  
   if(this->status != C_GTK_BUTTON_READY) return(C_GTK_BUTTON_ERROR);
   
   gtk_widget_show(this->pbutton);
   
   return(C_GTK_BUTTON_READY);
}