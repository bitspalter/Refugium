//////////////////////////////////////////////////////////////////////////////////
// [ GTK_Label_Class_Source ]
//////////////////////////////////////////////////////////////////////////////////

#include "C_GTK_Label.hpp"

//////////////////////////////////////////////////////////////////////////////////
// [Konstructor]  
//////////////////////////////////////////////////////////////////////////////////
C_GTK_Label::C_GTK_Label(){
   this->plabel = 0;
   this->status  = C_GTK_LABEL_ERROR;
}
//////////////////////////////////////////////////////////////////////////////////
// [Destructor]
//////////////////////////////////////////////////////////////////////////////////
C_GTK_Label::~C_GTK_Label(){

}
//////////////////////////////////////////////////////////////////////////////////
// [create]
//////////////////////////////////////////////////////////////////////////////////
GtkWidget* C_GTK_Label::create(const gchar *title){

   if(this->status == C_GTK_LABEL_READY) return(this->plabel);
   
   if(!title) return(C_GTK_LABEL_ERROR);
  
   this->plabel = gtk_label_new(title);
   if(!this->plabel) return(C_GTK_LABEL_ERROR);

   this->status = C_GTK_LABEL_READY;
   
   return(this->plabel);
}
//////////////////////////////////////////////////////////////////////////////////
// [setText]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::setText(const gchar *title){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
  
   if(!title) return(C_GTK_LABEL_ERROR);
   
   gtk_label_set_text(GTK_LABEL(this->plabel), title);
   
   return(C_GTK_LABEL_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setAlignment]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::setAlignment(float x, float y){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
   
   gtk_misc_set_alignment(GTK_MISC(this->plabel), x, y);

   return(C_GTK_LABEL_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setBackground]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::setBackground(const GdkRGBA* color){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
   
   if(!color) return(C_GTK_LABEL_ERROR);
   
   gtk_widget_override_background_color(this->plabel, GTK_STATE_FLAG_NORMAL, color);

   return(C_GTK_LABEL_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setColor]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::setColor(const GdkRGBA* color){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
   
   if(!color) return(C_GTK_LABEL_ERROR);
   
   gtk_widget_override_color(this->plabel, GTK_STATE_FLAG_NORMAL, color);

   return(C_GTK_LABEL_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [set_size]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::setSize(int x, int y){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
   
   gtk_widget_set_size_request(this->plabel, x, y);
   
   return(C_GTK_LABEL_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setFont]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::setFont(const char* pFont){
  
   if(this->status != C_GTK_LABEL_READY || !pFont) return(C_GTK_LABEL_ERROR);
   
   PangoFontDescription *font_desc;
   
   font_desc = pango_font_description_from_string(pFont);
   gtk_widget_modify_font(this->plabel, font_desc);
   pango_font_description_free(font_desc);

   return(C_GTK_LABEL_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [get_label]
//////////////////////////////////////////////////////////////////////////////////
GtkWidget* C_GTK_Label::getLabel(){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
   
   return(this->plabel);
}
//////////////////////////////////////////////////////////////////////////////////
// [hide]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::hide(){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
   
   gtk_widget_hide(this->plabel);
   
   return(C_GTK_LABEL_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [show]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Label::show(){
  
   if(this->status != C_GTK_LABEL_READY) return(C_GTK_LABEL_ERROR);
   
   gtk_widget_show(this->plabel);
   
   return(C_GTK_LABEL_READY);
}