//////////////////////////////////////////////////////////////////////////////////
// [ GTK_Window_Class_Source ]
//////////////////////////////////////////////////////////////////////////////////

#include "C_GTK_Window.hpp"

//////////////////////////////////////////////////////////////////////////////////
// [Konstructor]  
//////////////////////////////////////////////////////////////////////////////////
C_GTK_Window::C_GTK_Window(){
   this->pwindow = 0;
   this->status  = C_GTK_WINDOW_ERROR;
}
//////////////////////////////////////////////////////////////////////////////////
// [Destructor]
//////////////////////////////////////////////////////////////////////////////////
C_GTK_Window::~C_GTK_Window(){

}
//////////////////////////////////////////////////////////////////////////////////
// [create]
//////////////////////////////////////////////////////////////////////////////////
GtkWidget* C_GTK_Window::create(){

   if(this->status == C_GTK_WINDOW_READY) return(this->pwindow);
   
   this->pwindow = gtk_window_new(GTK_WINDOW_TOPLEVEL);
   if(!this->pwindow) return(0);
   
   this->status = C_GTK_WINDOW_READY;
   
   return(this->pwindow);
}
//////////////////////////////////////////////////////////////////////////////////
// [setCaption]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Window::setCaption(const gchar* title){
  
   if(this->status != C_GTK_WINDOW_READY) return(C_GTK_WINDOW_ERROR);
  
   if(!title) return(C_GTK_WINDOW_ERROR);
    
   gtk_window_set_title(GTK_WINDOW(this->pwindow), title);
   
   return(C_GTK_WINDOW_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setSize]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Window::setSize(int x, int y){
  
   if(this->status != C_GTK_WINDOW_READY) return(C_GTK_WINDOW_ERROR);
   
   gtk_window_resize(GTK_WINDOW(this->pwindow), x, y);
   
   return(C_GTK_WINDOW_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [setBackground]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Window::setBackground(const GdkRGBA* color){
  
   if(this->status != C_GTK_WINDOW_READY) return(C_GTK_WINDOW_ERROR);
   
   if(!color) return(C_GTK_WINDOW_ERROR);
   
   gtk_widget_override_background_color(this->pwindow, GTK_STATE_FLAG_NORMAL, color);

   return(C_GTK_WINDOW_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [getWindow]
//////////////////////////////////////////////////////////////////////////////////
GtkWidget* C_GTK_Window::getWindow(){
  
   if(this->status != C_GTK_WINDOW_READY) return(C_GTK_WINDOW_ERROR);
   
   return(this->pwindow);
}
//////////////////////////////////////////////////////////////////////////////////
// [max]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Window::max(){
  
   if(this->status != C_GTK_WINDOW_READY) return(C_GTK_WINDOW_ERROR);
   
   gtk_window_maximize(GTK_WINDOW(this->pwindow)); 

   return(C_GTK_WINDOW_READY);
}
//////////////////////////////////////////////////////////////////////////////////
// [min]
//////////////////////////////////////////////////////////////////////////////////
int C_GTK_Window::min(){
  
   if(this->status != C_GTK_WINDOW_READY) return(C_GTK_WINDOW_ERROR);
   
   gtk_window_iconify(GTK_WINDOW(this->pwindow)); 

   return(C_GTK_WINDOW_READY);
}